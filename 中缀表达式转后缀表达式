/*
1）如果遇到操作数，我们就直接将其输出。

2）如果遇到操作符，则我们将其放入到栈中，遇到左括号时我们也将其放入栈中。

3）如果遇到一个右括号，则将栈元素弹出，将弹出的操作符输出直到遇到左括号为止。注意，左括号只弹出并不输出。

4）如果遇到任何其他的操作符，如（“+”， “*”，“（”）等，从栈中弹出元素直到遇到发现更低优先级的元素(或者栈为空)为止。弹出完

这些元素后，才将遇到的操作符压入到栈中。有一点需要注意，只有在遇到" ) "的情况下我们才弹出" ( "，其他情况我们都不会弹出" ( "。

5）如果我们读到了输入的末尾，则将栈中所有元素依次弹出。
*/

#include <bits/stdc++.h>
using namespace std;

void calculate(string s) {
    vector<char> suffixExp;
    stack<char> opera;
    for (char c : s) {
        if (c == ' ')
            continue;
        else if (isalpha(c)) {
            suffixExp.push_back(c);
        } else {
            if (c == '+' or c == '-') {
                while (!opera.empty() and opera.top() != '(') {
                    suffixExp.push_back(opera.top());
                    opera.pop();
                }
            } else if (c == '*' or c == '/') {
                while (!opera.empty() and
                       (opera.top() == '*' or opera.top() == '/')) {
                    suffixExp.push_back(opera.top());
                    opera.pop();
                }
            } else if (c == ')') {
                while (!opera.empty() and opera.top() != '(') {
                    suffixExp.push_back(opera.top());
                    opera.pop();
                }
                opera.pop();
            }
            if (c != ')')
                opera.push(c);
        }
    }
    while (!opera.empty()) {
        suffixExp.push_back(opera.top());
        opera.pop();
    }
    for (auto a : suffixExp)
        cout << a;
}

int main() {
    calculate("a+b-a*((c+d)/e-f)");
    return 0;
}
