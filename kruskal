#include <bits/stdc++.h>
using namespace std;

struct Node  //定义边的储存结构。记录边的起点，终点和距离
{
    int dis;
    int from;
    int to;
    Node(int from, int to, int dis) : from(from), to(to), dis(dis) {}
};

const int vers = 6;  //结点数
const int arcs = 8;  //边数
int vertex[vers];    //结点的结合
Node mapp[arcs] = {  //边的集合
    {0, 1, 3},
    {0, 4, 1},
    {1, 2, 5},
    {1, 4, 4},
    {2, 3, 2},
    {2, 4, 6},
    {3, 4, 7},
    {4, 5, 10},
};

int findFather(int x)  //查抄两颗子树是否相连
{
    return x == vertex[x] ? x : findFather(vertex[x]);
}

void unionVertex(int x, int y)  //连接两颗子树。
{
    x = findFather(x);
    y = findFather(y);
    if (x < y)
        vertex[y] = x;
    else
        vertex[x] = y;
}

void kruskal()
{
    int i = 0, res = 0, count = 0; //count记录已连接的边的数量，res代表边的长度之和
    for (i = 0; i < arcs and count < vers - 1; i++)
    {
        int from = mapp[i].from;
        int to = mapp[i].to;
        if (findFather(from) != findFather(to)) //找到不相连的子树，将他们连接起来
        {
            ++count;  
            res += mapp[i].dis;
            unionVertex(from, to);
        }
    }
    cout << res;
}
int main()
{
    for (int i = 0; i < vers; i++) //最开始每个顶点是一颗树
        vertex[i] = i;
    sort(mapp, mapp + arcs, [](Node &a, Node &b) { //按边的大小依次选择边来构成子树
        return a.dis < b.dis;
    });
    kruskal();
    return 0;
}
