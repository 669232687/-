#include <bits/stdc++.h>
using namespace std;
struct ListNode {
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(NULL) {}
};
void selectSort(ListNode*& p) {
    ListNode *t, *pre, *maxPre, *max, *cur = p;
    p = nullptr;
    while (cur) {
        t = cur->next;
        pre = cur;
        maxPre = cur;
        max = cur;
        while (t) {
            if (t->val > max->val) {
                maxPre = pre;
                max = t;
            }
            pre = t;
            t = t->next;
        }
        if (max == cur) //最大的结点就是第一个结点
            cur = cur->next;
        else   //最大的结点不是第一个，需要从链表中摘下。
            maxPre->next = max->next;
        max->next = p;  //把最大的结点放到已排序的结点前面，此时最大的结点要小于所有已排序的结点
        p = max;
    }
}
int main() {
    ListNode *p = new ListNode(5), *cur = p;
    for (int i = 0; i < 10; ++i) {
        ListNode* t = new ListNode(rand() % 20);
        cur->next = t;
        cur = t;
    }
    cur = p;
    while (cur) {
        cout << cur->val << ' ';
        cur = cur->next;
    }
    cout << endl;
    selectSort(p);
    while (p) {
        cout << p->val << ' ';
        p = p->next;
    }
    return 0;
}

//归并排序
class Solution {
public:
    ListNode* sortList(ListNode* head) {
        if(!head || !head->next)
            return head;
        ListNode* slow=head,*fast=head;
        while(fast->next && fast->next->next){
            fast=fast->next->next;
            slow=slow->next;
        }
        ListNode* t=slow->next;
        slow->next=NULL;
        return merge(sortList(head),sortList(t));
    }
    ListNode* merge(ListNode* p1,ListNode* p2){
        ListNode* dummy=new ListNode(0),*cur=dummy;
        while(p1 && p2){
            if(p1->val<p2->val){
                cur->next=p1;
                p1=p1->next;
            }
            else{
                cur->next=p2;
                p2=p2->next;
            }
            cur=cur->next;
        }
        cur->next = p1?p1:p2;
        return dummy->next;
    }
};
