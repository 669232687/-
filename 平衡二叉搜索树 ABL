#include <bits/stdc++.h>
using namespace std;

struct Node
{
    int val;
    Node *left;
    Node *right;
    Node(int val) : val(val), left(NULL), right(NULL) {}
};

void levelTraversal(Node *&root)
{
    queue<Node *> q;
    q.push(root);
    while (!q.empty())
    {
        int size = q.size();
        while(size--){
        Node *t = q.front();
        q.pop();
        cout << t->val << ' ';
        if (t->left)
            q.push(t->left);
        if (t->right)
            q.push(t->right);
        }
        cout<<endl;
    }
    cout << endl;
}

void inOrderTravel(Node *&root)
{
    stack<Node *> st;
    Node *p = root;
    while (p or !st.empty())
    {
        while (p)
        {
            st.push(p);
            p = p->left;
        }
        p = st.top();
        st.pop();
        cout << p->val << ' ';
        p = p->right;
    }
    cout << endl;
}
int getHeight(Node *t)
{
	if(t==NULL) return 0;
	return max(getHeight(t->left),getHeight(t->right))+1;
}
Node *rightRotate(Node *node)
{
    Node *p = node->left;
    node->left = p->right;
    p->right = node;
    return p;
}
Node *leftRotate(Node *node)
{
    Node *p = node->right;
    node->right = p->left;
    p->left = node;
    return p;
}

Node *leftRotateRight(Node *node)
{
    node->left = leftRotate(node->left);
    return rightRotate(node);
}

Node *rightRotateleft(Node *node)
{
    node->right = rightRotate(node->right);
    return leftRotate(node);
}

Node *insert(Node *node, int key)
{
    if (!node)
    {
        node = new Node(key);
    }
    else if (node->val < key)
    {
        node->right = insert(node->right, key);
        if (getHeight(node->right) - getHeight(node->left) > 1)
        {
            if (key > node->right->val)
                node = leftRotate(node);
            else
                node = rightRotateleft(node);
        }
    }
    else
    {
        node->left = insert(node->left, key);
        if (getHeight(node->left) - getHeight(node->right) > 1)
        {
            if (key < node->left->val)
                node = rightRotate(node);
            else
                node = leftRotateRight(node);
        }
    }
    return node;
}

int main()
{
    Node* root=NULL;
    int x;
    cin>>x;
    while(x!=-1){
        root = insert(root,x);
        levelTraversal(root);
        cin>>x;
    }
    return 0;

}
